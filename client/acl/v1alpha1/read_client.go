// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package acl

import (
	"context"
	"math"

	"github.com/golang/protobuf/proto"
	gax "github.com/googleapis/gax-go/v2"
	aclpb "github.com/ory/keto/api/keto/acl/v1alpha1"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var newReadClientHook clientHook

// ReadCallOptions contains the retry settings for each method of ReadClient.
type ReadCallOptions struct {
	ListRelationTuples []gax.CallOption
}

func defaultReadClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("use-correct-keto-host-in-client:443"),
		internaloption.WithDefaultMTLSEndpoint("use-correct-keto-host-in-client:443"),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultReadCallOptions() *ReadCallOptions {
	return &ReadCallOptions{
		ListRelationTuples: []gax.CallOption{},
	}
}

// ReadClient is a client for interacting with .
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type ReadClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// The gRPC API client.
	readClient aclpb.ReadServiceClient

	// The call options for this service.
	CallOptions *ReadCallOptions

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewReadClient creates a new read service client.
//
// The service to query Access Control Lists.
func NewReadClient(ctx context.Context, opts ...option.ClientOption) (*ReadClient, error) {
	clientOpts := defaultReadClientOptions()

	if newReadClientHook != nil {
		hookOpts, err := newReadClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	c := &ReadClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		CallOptions:      defaultReadCallOptions(),

		readClient: aclpb.NewReadServiceClient(connPool),
	}
	c.setGoogleClientInfo()

	return c, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *ReadClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *ReadClient) Close() error {
	return c.connPool.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *ReadClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// ListRelationTuples lists ACL relation tuples.
func (c *ReadClient) ListRelationTuples(ctx context.Context, req *aclpb.ListRelationTuplesRequest, opts ...gax.CallOption) *RelationTupleIterator {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append(c.CallOptions.ListRelationTuples[0:len(c.CallOptions.ListRelationTuples):len(c.CallOptions.ListRelationTuples)], opts...)
	it := &RelationTupleIterator{}
	req = proto.Clone(req).(*aclpb.ListRelationTuplesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*aclpb.RelationTuple, string, error) {
		var resp *aclpb.ListRelationTuplesResponse
		req.PageToken = pageToken
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.readClient.ListRelationTuples(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetRelationTuples(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}
	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()
	return it
}

// RelationTupleIterator manages a stream of *aclpb.RelationTuple.
type RelationTupleIterator struct {
	items    []*aclpb.RelationTuple
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*aclpb.RelationTuple, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *RelationTupleIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *RelationTupleIterator) Next() (*aclpb.RelationTuple, error) {
	var item *aclpb.RelationTuple
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *RelationTupleIterator) bufLen() int {
	return len(it.items)
}

func (it *RelationTupleIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
